// Generated by CoffeeScript 1.6.3
var Beholden, defineProperty, deps, getValue, main, pushChanges, setValue, stateKey,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

deps = {
  stack: [],
  addActive: function(arr) {
    var active;
    active = this.stack[this.stack.length - 1];
    if (active && arr.indexOf(active) === -1) {
      return arr.push(active);
    }
  },
  track: function(config) {
    var val;
    this.stack.push(config);
    val = config.valueGetter();
    this.stack.pop(config);
    return val;
  }
};

defineProperty = function(object, name, trigger) {
  var config, target;
  target = object[name];
  config = {
    name: name,
    value: target,
    dependents: []
  };
  if (target instanceof Function) {
    config.expression = true;
    config.valueGetter = target.bind(object);
  }
  if (target instanceof Array) {
    'push pop unshift shift reverse sort splice'.split(' ').forEach(function(prop) {
      return Object.defineProperty(target, prop, {
        value: function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          trigger([name]);
          return (_ref = Array.prototype[prop]).call.apply(_ref, [target].concat(__slice.call(args)));
        }
      });
    });
  }
  Object.defineProperty(object, name, {
    enumerable: true,
    configurable: true,
    get: function() {
      return getValue(config);
    },
    set: function(newVal) {
      return setValue(config, newVal, trigger);
    }
  });
  return config;
};

getValue = function(config) {
  deps.addActive(config.dependents);
  return config.value;
};

setValue = function(config, newVal, trigger, changed) {
  var depConfig, _i, _len, _ref;
  config.value = newVal;
  changed || (changed = [config.name]);
  _ref = config.dependents;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    depConfig = _ref[_i];
    if (!depConfig.expression) {
      continue;
    }
    changed.push(depConfig.name);
    setValue(depConfig, deps.track(depConfig), void 0, changed);
  }
  if (typeof trigger === "function") {
    trigger(changed);
  }
  return newVal;
};

Beholden = (function() {
  function Beholden(object) {
    var config, name, _i, _len, _ref, _ref1;
    this.object = object;
    this.__notify = __bind(this.__notify, this);
    this.subscribers = [];
    this.properties = {};
    this.changes = [];
    _ref = Object.keys(this.object);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      this.__addProperty(name);
    }
    _ref1 = this.properties;
    for (name in _ref1) {
      config = _ref1[name];
      if (config.expression) {
        setValue(config, deps.track(config));
      }
    }
  }

  Beholden.prototype.__addProperty = function(name) {
    var notifier,
      _this = this;
    notifier = function(names) {
      return pushChanges(_this.changes, names, _this.__notify);
    };
    return this.properties[name] = defineProperty(this.object, name, notifier);
  };

  Beholden.prototype.__notify = function() {
    var sub, _i, _len, _ref;
    _ref = this.subscribers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sub = _ref[_i];
      if (this.changes.indexOf(sub.property) > -1) {
        sub.fn(this.properties[sub.property].value, this.object);
      }
    }
    return this.changes = [];
  };

  Beholden.prototype.subscribe = function(property, fn) {
    if (typeof fn !== 'function') {
      throw new TypeError("must provide Function");
    }
    if (typeof property !== 'string') {
      throw new TypeError("must provide String");
    }
    this.subscribers.push({
      property: property,
      fn: fn
    });
    return this;
  };

  Beholden.prototype.update = function(source) {
    var key, value;
    for (key in source) {
      value = source[key];
      if (!this.properties[key]) {
        this.object[key] = value;
        this.__addProperty(key);
      } else {
        this.object[key] = value;
      }
    }
    return this;
  };

  return Beholden;

})();

pushChanges = function(list, names, trigger) {
  var name, _i, _len, _results;
  if (list.length === 0) {
    setTimeout(trigger, 0);
  }
  _results = [];
  for (_i = 0, _len = names.length; _i < _len; _i++) {
    name = names[_i];
    if (list.indexOf(name) === -1) {
      _results.push(list.push(name));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

stateKey = "_behold";

main = function(obj) {
  var beholden;
  if (obj[stateKey]) {
    return obj[stateKey];
  }
  beholden = new Beholden(obj);
  Object.defineProperty(obj, stateKey, {
    value: beholden
  });
  return beholden;
};

module.exports = main;
