// Generated by CoffeeScript 1.6.2
var Watcher, main, stateKey,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty;

Watcher = (function() {
  function Watcher(value) {
    this.value = value;
    this.notifySubscribers = __bind(this.notifySubscribers, this);
    this.set = __bind(this.set, this);
    this.get = __bind(this.get, this);
    this.subscribers = [];
  }

  Watcher.prototype.get = function() {
    return this.value;
  };

  Watcher.prototype.set = function(newVal) {
    process.nextTick(this.notifySubscribers);
    return this.value = newVal;
  };

  Watcher.prototype.notifySubscribers = function() {
    var fn, _i, _len, _ref, _results;

    _ref = this.subscribers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      _results.push(fn());
    }
    return _results;
  };

  Watcher.prototype.subscribe = function(fn) {
    this.subscribers.push(fn);
    return this;
  };

  return Watcher;

})();

stateKey = "_behold";

main = function(obj, whitelist) {
  var name, observables, properties, _i, _len, _ref;

  observables = {};
  properties = Object.getOwnPropertyNames(obj);
  if (!(whitelist instanceof Array)) {
    whitelist = properties;
  }
  Object.defineProperty(obj, stateKey, {
    value: observables
  });
  _ref = Object.keys(obj);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    if (whitelist.indexOf(name) > -1) {
      main.defineObserver(obj, name, obj[name]);
    }
  }
  return obj;
};

main.defineObserver = function(obj, propName, val) {
  var watch;

  switch (typeof val) {
    case 'function':
      return false;
    case 'object':
      return false;
    default:
      obj[stateKey][propName] = watch = new Watcher(val);
      return Object.defineProperty(obj, propName, {
        enumerable: true,
        get: watch.get,
        set: watch.set
      });
  }
};

main.getObs = function(obj, prop) {
  return obj[stateKey][prop];
};

main.subscribe = function(obj, prop, fn, context) {
  return main.getObs(obj, prop).subscribe(fn, context);
};

main.update = function(targetObj, sourceObj) {
  var key, value, _results;

  _results = [];
  for (key in sourceObj) {
    if (!__hasProp.call(sourceObj, key)) continue;
    value = sourceObj[key];
    if (!main.getObs(targetObj, key)) {
      main[key] = value;
      _results.push(main.defineObserver(targetObj, key, value));
    } else {
      _results.push(targetObj[key] = value);
    }
  }
  return _results;
};

module.exports = main;
