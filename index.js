// Generated by CoffeeScript 1.6.3
(function() {
  var Beholdable, Beholden, Beholder, defineProperty, deps, getValue, main, setValue, stateKey,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  deps = {
    stack: [],
    addActive: function(arr) {
      var active;
      active = this.stack[this.stack.length - 1];
      if (active && arr.indexOf(active) === -1) {
        return arr.push(active);
      }
    },
    track: function(config) {
      var val;
      this.stack.push(config);
      val = config.valueGetter();
      this.stack.pop(config);
      return val;
    }
  };

  Beholdable = (function() {
    function Beholdable() {
      this.__fire = __bind(this.__fire, this);
      this.dependents = [];
      this.subscribers = [];
      this.__triggered = false;
    }

    Beholdable.prototype.__trigger = function() {
      var dep, _i, _len, _ref, _results;
      if (this.__triggered) {
        return;
      }
      this.__triggered = true;
      setTimeout(this.__fire, 0);
      _ref = this.dependents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dep = _ref[_i];
        _results.push(dep.__trigger());
      }
      return _results;
    };

    Beholdable.prototype.__fire = function() {
      var sub, _i, _len, _ref, _results;
      this.__triggered = false;
      _ref = this.subscribers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sub = _ref[_i];
        _results.push(sub(this.value));
      }
      return _results;
    };

    Beholdable.prototype.subscribe = function(fn) {
      if (typeof fn !== 'function') {
        throw new TypeError("must provide Function");
      }
      this.subscribers.push(fn);
      return this;
    };

    return Beholdable;

  })();

  defineProperty = function(object, name) {
    var config, target;
    target = object[name];
    config = new Beholdable();
    config.value = target;
    if (target instanceof Array) {
      'push pop unshift shift reverse sort splice'.split(' ').forEach(function(prop) {
        return Object.defineProperty(target, prop, {
          value: function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            config.__trigger();
            return (_ref = Array.prototype[prop]).call.apply(_ref, [target].concat(__slice.call(args)));
          }
        });
      });
    }
    Object.defineProperty(object, name, {
      enumerable: true,
      configurable: true,
      get: function() {
        return getValue(config);
      },
      set: function(newVal) {
        return setValue(config, newVal);
      }
    });
    return config;
  };

  getValue = function(config) {
    deps.addActive(config.dependents);
    return config.value;
  };

  setValue = function(config, newVal) {
    var depConfig, _i, _len, _ref;
    config.value = newVal;
    _ref = config.dependents;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      depConfig = _ref[_i];
      setValue(depConfig, deps.track(depConfig));
    }
    config.__trigger();
    return newVal;
  };

  Beholden = (function() {
    function Beholden(object) {
      var config, name, _i, _len, _ref, _ref1;
      this.object = object;
      this.properties = {};
      _ref = Object.keys(this.object);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (typeof this.object[name] !== 'function') {
          this.__addProperty(name);
        }
      }
      _ref1 = this.properties;
      for (name in _ref1) {
        config = _ref1[name];
        if (config.expression) {
          setValue(config, deps.track(config));
        }
      }
    }

    Beholden.prototype.__addProperty = function(name) {
      return this.properties[name] = defineProperty(this.object, name);
    };

    Beholden.prototype.subscribe = function(name, fn) {
      var beholdable;
      if (typeof fn !== 'function') {
        throw new TypeError("must provide Function");
      }
      if (typeof name !== 'string') {
        throw new TypeError("must provide String");
      }
      if (beholdable = this.properties[name]) {
        beholdable.subscribe(fn);
      }
      return this;
    };

    Beholden.prototype.update = function(source) {
      var key, value;
      for (key in source) {
        value = source[key];
        if (!this.properties[key]) {
          this.object[key] = value;
          this.__addProperty(key);
        } else {
          this.object[key] = value;
        }
      }
      return this;
    };

    return Beholden;

  })();

  Beholder = (function(_super) {
    __extends(Beholder, _super);

    function Beholder(valueGetter) {
      this.valueGetter = valueGetter;
      this.expression = true;
      Beholder.__super__.constructor.call(this);
      this.value = deps.track(this);
    }

    return Beholder;

  })(Beholdable);

  stateKey = "_behold";

  main = function(thing) {
    var beholden;
    if (thing[stateKey]) {
      return thing[stateKey];
    }
    if (thing instanceof Function) {
      beholden = new Beholder(thing);
    } else if (thing instanceof Object) {
      beholden = new Beholden(thing);
    }
    Object.defineProperty(thing, stateKey, {
      value: beholden
    });
    return beholden;
  };

  if (typeof this === 'object' && typeof module === 'object') {
    module.exports = main;
  } else if (typeof define === 'function' && define.amd) {
    define(main);
  } else {
    this.behold = main;
  }

}).call(this);
